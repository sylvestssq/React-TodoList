{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","backgroundColor","padding","borderBottom","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","Header","headerStyle","linkStyle","to","background","textAlign","AddTodo","state","a","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","App","axios","delete","then","response","filter","post","data","get","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d8da84f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TodoItem extends Component {\n\n    /* Function within the class to set dynamic style */\n    getStyle = () => {\n        return {\n            // this is a turnary operatior. \n            //If true use line-through, if false use none\n            textDecoration: this.props.todo.completed ? \n            'line-through' : 'none',\n            backgroundColor: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted'\n\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n            <p>\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> {' '}\n                {title}\n                {/* button for deleting todo list*/}\n                <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\n            </p>\n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\n//To have fixed CSS styling \nconst itemStyle = {\n    backgroundColor: '#f4f4f4'\n}\n//css styling for x button\nconst btnStyle = {\n    backgroundColor: '#20A4F3',\n    color: '#ffffff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}","import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n\nexport default class Todos extends Component{\n    render() {\n        return this.props.todos.map((todo) => (\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ));    \n    }\n}\n\n// PropTypes\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nexport default function Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to='/'>Home</Link> | <Link style={linkStyle} to='/about'>About</Link>\n        </header>\n    )\n}\n\n//CSS Styling for header\nconst headerStyle = {\n    background: '#20A4F3',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff'\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class AddTodo extends Component {\n\tstate = {\n\t\ttitle: ''\n\t}\n\n\tonChange = (a) => this.setState(\n\t\t{ [a.target.name]: [a.target.value]}\n\t)\n\t\n\tonSubmit = (a) => {\n\t\t//to stop the default sending like in vanilla JS\n\t\ta.preventDefault();\n\t\tthis.props.addTodo(this.state.title);\n\t\tthis.setState({ title: '' })\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='title'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflex: '10',\n\t\t\t\t\t\tpadding: '5px'\n\t\t\t\t\t}}\n\t\t\t\t\tplaceholder='Add a new todo item ...'\n\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t/>\n\t\t\t\t<input \n\t\t\t\t\ttype='submit'\n\t\t\t\t\tvalue='Add'\n\t\t\t\t\tclassName='btn'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflex: '1',\n\t\t\t\t\t\tfloat: 'right'\n\t\t\t\t\t}}\n\t\t\t\t/>\t\n\t\t\t</form>\n\t\t\t)\n\t\t}\n\t}\n\t\n// PropTypes\nAddTodo.propTypes = {\n\taddTodo: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport default function About() {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0. created using React</p>\n        </div>\n    )\n}\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n//import {v4 as uuid} from 'uuid';\nimport axios from 'axios';\n\nexport default class App extends Component{\n  \n  state = {\n    todos: [\n    ]\n  }\n  \n  componentDidMount () {\n    //gives us a promise\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=2')\n      .then(response => this.setState({todos: response.data}))\n  }\n\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) })\n  }\n  \n  //Delete todo\n  delTodo = (id) => {\n    axios.delete('https://jsonplaceholder.typicode.com/todos/${id}').then(response => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}))\n  }\n\n  //Add todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    }).then(response => this.setState({ todos: [...this.state.todos, response.data]}))\n  }\n  \n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n        <div className=\"container\">\n          <Header/>\n          <Route exact path='/' render={props => (\n            <React.Fragment>\n              {/* Calling the Todos component */}\n              <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n              <AddTodo addTodo={this.addTodo}/>\n            </React.Fragment>\n          )} />\n          <Route path='/about' component={About}/>\n        </div>\n      </div>\n      </Router>\n    );    \n  }\n}\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}