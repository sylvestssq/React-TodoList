{"ast":null,"code":"import _classCallCheck from\"/Users/sylvest/Documents/Personal/Projects/TodoList/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sylvest/Documents/Personal/Projects/TodoList/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/sylvest/Documents/Personal/Projects/TodoList/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/sylvest/Documents/Personal/Projects/TodoList/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';var TodoItem=/*#__PURE__*/function(_Component){_inherits(TodoItem,_Component);var _super=_createSuper(TodoItem);function TodoItem(){var _this;_classCallCheck(this,TodoItem);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.getStyle=function(){return{// this is a turnary operatior. \n//If true use line-through, if false use none\ntextDecoration:_this.props.todo.completed?'line-through':'none',backgroundColor:'#f4f4f4',padding:'10px',borderBottom:'1px #ccc dotted'};};return _this;}_createClass(TodoItem,[{key:\"render\",value:function render(){var _this$props$todo=this.props.todo,id=_this$props$todo.id,title=_this$props$todo.title;return/*#__PURE__*/React.createElement(\"div\",{style:this.getStyle()},/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",onChange:this.props.markComplete.bind(this,id)}),\" \",' ',title,/*#__PURE__*/React.createElement(\"button\",{style:btnStyle,onClick:this.props.delTodo.bind(this,id)},\"x\")));}}]);return TodoItem;}(Component);//PropTypes\nexport{TodoItem as default};//To have fixed CSS styling \nvar itemStyle={backgroundColor:'#f4f4f4'};//css styling for x button\nvar btnStyle={backgroundColor:'#20A4F3',color:'#ffffff',border:'none',padding:'5px 9px',borderRadius:'50%',cursor:'pointer',float:'right'};","map":{"version":3,"sources":["/Users/sylvest/Documents/Personal/Projects/TodoList/src/components/TodoItem.js"],"names":["React","Component","TodoItem","getStyle","textDecoration","props","todo","completed","backgroundColor","padding","borderBottom","id","title","markComplete","bind","btnStyle","delTodo","itemStyle","color","border","borderRadius","cursor","float"],"mappings":"wpBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,GAGqBC,CAAAA,Q,mUAGjBC,Q,CAAW,UAAM,CACb,MAAO,CACH;AACA;AACAC,cAAc,CAAE,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,CAChB,cADgB,CACC,MAJd,CAKHC,eAAe,CAAE,SALd,CAMHC,OAAO,CAAE,MANN,CAOHC,YAAY,CAAE,iBAPX,CAAP,CAUH,C,2EAEQ,sBACiB,KAAKL,KAAL,CAAWC,IAD5B,CACGK,EADH,kBACGA,EADH,CACOC,KADP,kBACOA,KADP,CAEL,mBACI,2BAAK,KAAK,CAAE,KAAKT,QAAL,EAAZ,eACA,0CACI,6BAAO,IAAI,CAAC,UAAZ,CAAuB,QAAQ,CAAE,KAAKE,KAAL,CAAWQ,YAAX,CAAwBC,IAAxB,CAA6B,IAA7B,CAAmCH,EAAnC,CAAjC,EADJ,KACgF,GADhF,CAEKC,KAFL,cAII,8BAAQ,KAAK,CAAEG,QAAf,CAAyB,OAAO,CAAE,KAAKV,KAAL,CAAWW,OAAX,CAAmBF,IAAnB,CAAwB,IAAxB,CAA8BH,EAA9B,CAAlC,MAJJ,CADA,CADJ,CAUH,C,sBA5BiCV,S,EA+BtC;OA/BqBC,Q,aAsCrB;AACA,GAAMe,CAAAA,SAAS,CAAG,CACdT,eAAe,CAAE,SADH,CAAlB,CAGA;AACA,GAAMO,CAAAA,QAAQ,CAAG,CACbP,eAAe,CAAE,SADJ,CAEbU,KAAK,CAAE,SAFM,CAGbC,MAAM,CAAE,MAHK,CAIbV,OAAO,CAAE,SAJI,CAKbW,YAAY,CAAE,KALD,CAMbC,MAAM,CAAE,SANK,CAObC,KAAK,CAAE,OAPM,CAAjB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TodoItem extends Component {\n\n    /* Function within the class to set dynamic style */\n    getStyle = () => {\n        return {\n            // this is a turnary operatior. \n            //If true use line-through, if false use none\n            textDecoration: this.props.todo.completed ? \n            'line-through' : 'none',\n            backgroundColor: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted'\n\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n            <p>\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/> {' '}\n                {title}\n                {/* button for deleting todo list*/}\n                <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\n            </p>\n            </div>\n        )\n    }\n}\n\n//PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\n//To have fixed CSS styling \nconst itemStyle = {\n    backgroundColor: '#f4f4f4'\n}\n//css styling for x button\nconst btnStyle = {\n    backgroundColor: '#20A4F3',\n    color: '#ffffff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}"]},"metadata":{},"sourceType":"module"}